function plot_salam_cpg(times, x, dtheta, drives, sigma)
% plot_salam_cpg(times, x, dtheta, drives)
%
% Plot the oscillator outputs and instantaneous frequencies of a model of
% the salamander CPG, as generated by the function 'salam_cpg_osc'.
%
% Inputs:
%   times   A vector of times defining the integration steps (e.g. 0:0.01:10)
%   x       A matrix of the oscillators' outputs (rows and columns as for r)
%   dtheta  A matrix of the oscillators' instantaneous frequencies, in rad/s
%   drives  A vector of same size as times, giving the drive level for the
%           corresponding time. Can also be a scalar (for constant drive).

  % Make sure we have a column vector of drives
  if length(drives) == 1
    drives = ones(length(times), 1) * drives;
  else
    drives = drives(:); % indexing with (:) ensures we have a column vector
  end

  nrsubplots = 5;
  plotsigma = false;
  if nargin == 5
      nrsubplots = 6;
      plotsigma = true;
  end
  
  % Make figure with given title
  FigHandle = figure('name', 'Salamander CPG output');
  clf;
  
  % Colors from Tango palette
  blue = [0.16 0.34 0.59];
  green = [0.38 0.71 0.055];
  
  n_segments = 8;                     % 8 axial segments
  girdles = [1 5];                    % Forelimbs project to segments 1-4, hind limbs to segments 5-end
  
  % Indices for trunk and tail oscillators on left side
  trunk = 1:girdles(2) - 1;
  tail = girdles(2):n_segments;
  

  % First subplot: axial oscillations
  % Using two rows to make it twice the height of the other plots
  subplot(nrsubplots, 1, [1 2]);
  
  % Calculate matrix of vertical offsets to have a "stack" of oscillations.
  step = 3; % separation between 2 oscillations
  offsets = repmat((n_segments:-1:1) * step, length(times), 1);
  
  % Plotting trunk and tail oscillations separately, to have different colors:
  hold on;
  plot(times, x(:, trunk) + offsets(:, trunk), 'color', blue, 'linewidth', 2);
  plot(times, x(:, tail) + offsets(:, tail), 'color', green, 'linewidth', 2);
  hold off;
  
  ylabels = cellfun(@(i) sprintf('x%d', i), num2cell(n_segments:-1:1), 'uniformoutput', false);
  set(gca, 'ytick', fliplr(offsets(1, :)), 'yticklabel', ylabels, 'xtick', []);
  ylabel('x Body');

  % Limb oscillations
  subplot(nrsubplots, 1, 3);
  step = 4;
  offsets = [2 * step, step];
  hold on;
  LF = 2 * n_segments + 1; % left forelimb
  LH = 2 * n_segments + 3; % left hind limb
  plot(times, x(:, LF) + offsets(1), 'color', blue, 'linewidth', 2);
  plot(times, x(:, LH) + offsets(2), 'color', green, 'linewidth', 2);
  hold off;

  set(gca, 'ytick', fliplr(offsets), 'yticklabel', {sprintf('x%d', LH), sprintf('x%d', LF)}, 'xtick', []);
  ylabel('x Limb');
  ylim([0.5 3.5] * step);
  
  
  % Instantaneous frequencies
  subplot(nrsubplots, 1, 4);
  freqs = dtheta / (2 * pi); % /2pi to convert rad/s to Hz
  plot(times, freqs, 'color', 'black');
  ylabel('Freq [Hz]');
  legend('Resulting frequencies','Location','southeast');
  set(gca, 'xtick', []);
  ylim([0 1.5]);
  
  
  % Drive
%   subplot(nrsubplots, 1, 5);
%   plot(times, drives, 'color', 'black');
%   ylabel('Drive d');  
%   if plotsigma 
%       set(gca, 'xtick', []);
%   else
%       xlabel('Time [s]');
%   end
  
  % intrinsic frequencies
  subplot(nrsubplots, 1, 5);
  plot([0,6], [0.5,0.5;0.5,0.4*6]);
  legend('Intrinsic limb frequency','Intrinsic axial frequency','Location','southeast');
  ylabel('Freq [Hz]');
  xlabel('Time [s]');
  
  % Gaussian noise sigma
  if plotsigma 
      subplot(nrsubplots, 1, 6);  
      plot(times,sigma, 'color', 'k');
      ylabel('Noise Ïƒ');  
      xlabel('Time [s]');
      set(FigHandle, 'Position', [100, 100, 1049, 895]);
  end

  
  print -dpng salam_cpg.png
  
end
